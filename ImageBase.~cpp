//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "ImageBase.h"
#include "Memory.h"
#include "anyfile.h"
#include "bmpfile.h"
#include <values.h>

//---------------------------------------------------------------------------

#pragma package(smart_init)
ImageBase & ImageBase::operator = (ImageBase & c)//Оператор присваивания
{
 int i,j;
 if((this->SizeImageY==c.SizeImageY)&&(this->SizeImageX==c.SizeImageX))
   {
    for(i=0;i<this->SizeImageY;i++)
        for(j=0;j<this->SizeImageX;j++)
           {
            this->Image[i][j] = c.Image[i][j];
            this->ImageComplex[i][j] = c.ImageComplex[i][j];
           }
   }
 else
   {
    DeleteArrayUC2(this->SizeImageY,Image);
    DeleteArrayComplex2(this->SizeImageY,ImageComplex);
    this->SizeImageX = c.SizeImageX;
    this->SizeImageY = c.SizeImageY;
    CreateArrayUC2(SizeImageY,SizeImageX,Image);
    CreateArrayComplex2(SizeImageY,SizeImageX,ImageComplex);
    for(i=0;i<this->SizeImageY;i++)
        for(j=0;j<this->SizeImageX;j++)
           {
            this->Image[i][j] = c.Image[i][j];
            this->ImageComplex[i][j] = c.ImageComplex[i][j];
           }
   }
 return(*this);
}
ImageBase & ImageBase::operator + (ImageBase & c)//Оператор сложения
{
 int i,j;
 int minY,minX;
 if(this->SizeImageY<c.SizeImageY)
   minY = this->SizeImageY;
 else
   minY = c.SizeImageY;
 if(this->SizeImageX<c.SizeImageX)
   minX = this->SizeImageX;
 else
   minX = c.SizeImageX;
 if((this->SizeImageY==c.SizeImageY)&&(this->SizeImageX==c.SizeImageX))
   {
    for(i=0;i<this->SizeImageY;i++)
        for(j=0;j<this->SizeImageX;j++)
           {
            this->Image[i][j] += c.Image[i][j];
            this->ImageComplex[i][j] += c.ImageComplex[i][j];
           }
   }
 else
   {
    for(i=0;i<minY;i++)
        for(j=0;j<minX;j++)
           {
            this->Image[i][j] += c.Image[i][j];
            this->ImageComplex[i][j] += c.ImageComplex[i][j];
           }
   }
 return(*this);
}
ImageBase & ImageBase::operator * (ImageBase & c)//Оператор умножения
{
 int i,j;
 int minY,minX;
 if(this->SizeImageY<c.SizeImageY)
   minY = this->SizeImageY;
 else
   minY = c.SizeImageY;
 if(this->SizeImageX<c.SizeImageX)
   minX = this->SizeImageX;
 else
   minX = c.SizeImageX;
 if((this->SizeImageY==c.SizeImageY)&&(this->SizeImageX==c.SizeImageX))
   {
    for(i=0;i<this->SizeImageY;i++)
        for(j=0;j<this->SizeImageX;j++)
           {
            this->Image[i][j] *= c.Image[i][j];
            this->ImageComplex[i][j] *= c.ImageComplex[i][j];
           }
   }
 else
   {
    for(i=0;i<minY;i++)
        for(j=0;j<minX;j++)
           {
            this->Image[i][j] *= c.Image[i][j];
            this->ImageComplex[i][j] *= c.ImageComplex[i][j];
           }
   }
 return(*this);
}
ImageBase & ImageBase::operator - (ImageBase & c)//Оператор вычитания
{
 int i,j;
 int minY,minX;
 if(this->SizeImageY<c.SizeImageY)
   minY = this->SizeImageY;
 else
   minY = c.SizeImageY;
 if(this->SizeImageX<c.SizeImageX)
   minX = this->SizeImageX;
 else
   minX = c.SizeImageX;
 if((this->SizeImageY==c.SizeImageY)&&(this->SizeImageX==c.SizeImageX))
   {
    for(i=0;i<this->SizeImageY;i++)
        for(j=0;j<this->SizeImageX;j++)
           {
            this->Image[i][j] -= c.Image[i][j];
            this->ImageComplex[i][j] -= c.ImageComplex[i][j];
           }
   }
 else
   {
    for(i=0;i<minY;i++)
        for(j=0;j<minX;j++)
           {
            this->Image[i][j] -= c.Image[i][j];
            this->ImageComplex[i][j] -= c.ImageComplex[i][j];
           }
   }
 return(*this);
}
ImageBase & ImageBase::operator / (ImageBase & c)//Оператор деления
{
 int i,j;
 int minY,minX;
 if(this->SizeImageY<c.SizeImageY)
   minY = this->SizeImageY;
 else
   minY = c.SizeImageY;
 if(this->SizeImageX<c.SizeImageX)
   minX = this->SizeImageX;
 else
   minX = c.SizeImageX;
 if((this->SizeImageY==c.SizeImageY)&&(this->SizeImageX==c.SizeImageX))
   {
    for(i=0;i<this->SizeImageY;i++)
        for(j=0;j<this->SizeImageX;j++)
           {
            if(c.Image[i][j]!=0)
            this->Image[i][j] /= c.Image[i][j];
            else
            this->Image[i][j] = 255;
            if(abs(c.ImageComplex[i][j])>1E-10)
            this->ImageComplex[i][j] /= c.ImageComplex[i][j];
            else
            this->ImageComplex[i][j] = 1E10;//MAXFLOAT/1000.;
           }
   }
 else
   {
    for(i=0;i<minY;i++)
        for(j=0;j<minX;j++)
           {
            if(c.Image[i][j]!=0)
            this->Image[i][j] /= c.Image[i][j];
            else
            this->Image[i][j] = 255;
            if(abs(c.ImageComplex[i][j])>1E-10)
            this->ImageComplex[i][j] /= c.ImageComplex[i][j];
            else
            this->ImageComplex[i][j] = 1E10;//MAXFLOAT/1000.;
           }
   }
 return(*this);
}
ImageBase::Value(complex<float> Val)//Присвоение всему комплексному массиву значения complex<float> Val
{
 int i,j;
    for(i=0;i<SizeImageY;i++)
       {
        for(j=0;j<SizeImageX;j++)
           {
            ImageComplex[i][j] = Val;
           }
       }
}
ImageBase::Norm()//Нормировка комплексного изображения на 1
{
 int i,j;
 float k;
 float max = 0;
 for(i=0;i<SizeImageY;i++)
    {
     for(j=0;j<SizeImageX;j++)
        {
         k = abs(ImageComplex[i][j]);
         if(k>max)
           {
            max = k;
           }
        }
    }
    for(i=0;i<SizeImageY;i++)//Чтение изображения из файла
       {
        for(j=0;j<SizeImageX;j++)
           {
            if(max>0)
            ImageComplex[i][j] = ImageComplex[i][j]/max;
           }
       }
}
int ImageBase::NearestSize()//Вычисление ближайшего числа кратного степени двойки
{
        int Size;
        int i;
        if(SizeImageX>SizeImageY)
          {
           Size = SizeImageX;
          }
        else
          {
           Size = SizeImageY;
          }
	for (i=0;(1 << i)<Size;i++);
	return 1 << i;

}
int ImageBase::fft1d (complex<double> *arr,int Size,int c)//Одномерное преобразование Фурье
{

	int i,k,m=0;
	for (i=1;i<Size;i<<=1,m++);
	if (i != Size)
		return -1;
	float q=1.;
	for (i=0;i<Size;i++,q=-q)
		arr[i]*=q;
	int n_2=Size/2,n_1=Size-1,j=0;
	for (i=0;i<n_1;i++)
	{
		if (i<j)
		{
			complex<double> t=arr[i];
			arr[i]=arr[j];
			arr[j]=t;
		}
		for (k=n_2;k<=j;j-=k,k>>=1);
		j+=k;
	}

        int le=1;
	float ed=1;
	float c_M_PI=c*M_PI;
	for (int l=0;l<m;l++)
	{
		int le1=le;
		le*=2;
		complex<double> u=1.;
		complex<double> w=polar(1.,(double)(-c_M_PI/le1));
		for (j=0;j<le1;j++,u*=w)
			for (i=j;i<Size;i+=le)
			{
				int ip=i+le1;
				complex<double> t=arr[ip]*u;
				arr[ip]=arr[i]-t;
				arr[i]+=t;
			}
	}
	for (i=0,q=1./(c==1 ? Size : 1);i<Size;i++,q=-q)
		arr[i]*=q;
	return(0);
}
float ImageBase::Energy()
{
int i,j;
float Aver=0;
for(i=0;i<SizeImageY;i++)
   {
    for(j=0;j<SizeImageX;j++)
       {
        Aver+=norm(ImageComplex[i][j]);
       }
   }
Aver = Aver/SizeImageY/SizeImageX;
return(Aver);
}
float ImageBase::Max()//Вычисляет максимальное значение модуля изображения
{
int i,j;
float mx=0;
for(i=0;i<SizeImageY;i++)
   {
    for(j=0;j<SizeImageX;j++)
       {
        if(abs(ImageComplex[i][j])>mx)
          mx = abs(ImageComplex[i][j]);
       }
   }
return(mx);
}
ImageBase::ReadFile(unsigned char *FileName)//Чтение изображения из файла
{
 int i,j;
 unsigned char *buf=new unsigned char[SizeImageX];
 BmpFile BMP;
 fileReturnedCode rc=frcOk;
 if((rc=BMP.OpenFile((char *)FileName))==frcOk )
   {
    for (int i=0;i<SizeImageX;i++)//Инициация буфера
         buf[i]=0;
    for(i=0;i<SizeImageY;i++)//Чтение изображения из файла
       {
        BMP.ReadString(i,buf);
        for(j=0;j<SizeImageX;j++)
           {
            Image[i][j] = buf[j];
            ImageComplex[i][j] = polar((float)1.,(float)(buf[j]/255.*2*M_PI));
           }
       }
    BMP.CloseFile();
   }
 delete buf;
}
ImageBase::WriteFile(char *FileName,int q)//Запись изображения в файл
{
 int i,j;
 float max,k;
 switch(q)
       {
        case 0:
               {
                max = 0;
                for(i=0;i<SizeImageY;i++)
                   {
                    for(j=0;j<SizeImageX;j++)
                       {
                        k = norm(ImageComplex[i][j]);
                        if(k>max)
                          {
                           max = k;
                          }
                       }
                   }
                break;
               }
        case 1:
               {
                max = 0;
                for(i=0;i<SizeImageY;i++)
                   {
                    for(j=0;j<SizeImageX;j++)
                       {
                        k = abs(ImageComplex[i][j]);
                        if(k>max)
                          {
                           max = k;
                          }
                       }
                   }
                break;
               }
       }

 unsigned char *buf=new unsigned char[SizeImageX];
 BmpFile BMP;
 BMP.OpenFile(FileName,SizeImageY,SizeImageX,8);
 for (int i=0;i<SizeImageX;i++)//Инициация буфера
     buf[i]=0;
    for(i=0;i<SizeImageY;i++)//Запись изображения в файл
       {
        BMP.ReadString(i,buf);
        for(j=0;j<SizeImageX;j++)
           {
            switch(q)
                  {
                   case 0:
                          buf[j] = norm(ImageComplex[i][j])/max*255;
                          break;
                   case 1:
                          buf[j] =  abs(ImageComplex[i][j])/max*255;
                          break;
                   case 2:
                          buf[j] = arg(ImageComplex[i][j])/2./M_PI*255.;
                          break;
                  }
           }
        BMP.WriteString(i,buf);
       }
    BMP.CloseFile();

 delete buf;
}
ImageBase::Crushing(int q)//Дробление изображения в q раз
{
 int i,j;
 unsigned char **ImageTemp;
 complex<float> **ImageComplexTemp;
 CreateArrayUC2(SizeImageY,SizeImageX,ImageTemp);
 CreateArrayComplex2(SizeImageY,SizeImageX,ImageComplexTemp);
 for(i=0;i<SizeImageY;i++)
       {
        for(j=0;j<SizeImageX;j++)
           {
            ImageTemp[i][j] = Image[i][j];
            ImageComplexTemp[i][j] = ImageComplex[i][j];
           }
       }
 DeleteArrayUC2(SizeImageY,Image);
 DeleteArrayComplex2(SizeImageY,ImageComplex);
 SizeImageX = q*SizeImageX;
 SizeImageY = q*SizeImageY;
 CreateArrayUC2(SizeImageY,SizeImageX,Image);
 CreateArrayComplex2(SizeImageY,SizeImageX,ImageComplex);
 for(i=0;i<SizeImageY;i++)
       {
        for(j=0;j<SizeImageX;j++)
           {
            Image[i][j] = ImageTemp[i/q][j/q];
            ImageComplex[i][j] = ImageComplexTemp[i/q][j/q];
           }
       }
 DeleteArrayUC2(SizeImageY/q,ImageTemp);
 DeleteArrayComplex2(SizeImageY/q,ImageComplexTemp);
}

void ImageBase::fft(int c)//Двумерное преобразование Фурье
{

//        float e1 = Energy();
        int i,j;
	int LineSize = NearestSize()*Zeros;
	int St=(LineSize-SizeImageX)/2;
	int End=St+SizeImageX;
	complex<double> *line = new complex<double>[LineSize];

	for(i=0;i<SizeImageY;i++)
	   {
	    for (j=0;j<LineSize;j++)
		{
	         if((j>=St) && (j<End))
		   line[j]=ImageComplex[i][j-St];
		 else line[j]=0.;
		}
	    fft1d(line,LineSize,c);
	    for (j=0;j<SizeImageX;j++)
	    	ImageComplex[i][j]=line[j+St];
	   }

	delete line;



	LineSize=NearestSize()*Zeros;
	St=(LineSize-SizeImageY)/2;
	End=St+SizeImageY;
	line=new complex<double>[LineSize];

	for(i=0;i<SizeImageX;i++)
	   {
	    for (j=0;j<LineSize;j++)
		{
	         if((j>=St) && (j<End))
		   line[j]=ImageComplex[j-St][i];
		 else line[j]=0.;
		}
	    fft1d(line,LineSize,c);
	    for (j=0;j<SizeImageY;j++)
	    	ImageComplex[j][i]=line[j+St];
	}
	delete line;
 //float e2 = Energy();
// e2 = sqrt(e1/e2);
for(i=0;i<SizeImageY;i++)
   {
    for(j=0;j<SizeImageX;j++)
       {
   //     ImageComplex[i][j] = ImageComplex[i][j]*e2;
       }
   }

}

ImageBase::frt2Dz (float Rx, float Ry, float Z,float Kw,int q)
{
  int  i, j;
  float  x, y, Hx, Hy, t;
  complex<float>  ex, ey;

  Hx = Rx/(SizeImageX-1);
  Hy = Ry/(SizeImageX-1);
  t = Kw/(2*Z)*q;
  for(i=0;i<SizeImageY;i++)
      {
       y = -Ry/2+i*Hy;
       ex = polar((float)1.,y*y*t);
       for(j=0;j<SizeImageX;j++)
           {
            x = -Rx/2+j*Hx;
            ey = polar((float)1.,x*x*t);
            ImageComplex[i][j] = ImageComplex[i][j]*ex*ey;
           }
     }
  fft(1.);
}
ImageBase::IKG(float Rx,float Ry,float Z,float Kw)//Интеграл Кирхгофа
{
 int i,j,k,l,I,J;
 float x,y,x1,y1,dx;
 dx = Rx/(SizeImageX-1);
 complex<double>** Array;
 complex<double>** Array1;
 float ** Arrayr;
 float** Arrayi;
 float** Array1r;
 float** Array1i;
 float** Array2r;
 float** Array2i;
 CreateArrayComplexD2(SizeImageX,SizeImageY,Array);
 CreateArrayComplexD2(SizeImageX,SizeImageY,Array1);
 CreateArrayFloat2(SizeImageX,SizeImageY,Arrayr);
 CreateArrayFloat2(SizeImageX,SizeImageY,Arrayi);
 CreateArrayFloat2(SizeImageX,SizeImageY,Array1r);
 CreateArrayFloat2(SizeImageX,SizeImageY,Array1i);
 CreateArrayFloat2(SizeImageX,SizeImageY,Array2r);
 CreateArrayFloat2(SizeImageX,SizeImageY,Array2i);


 for(i=0;i<SizeImageY;i++)
    {
     for(j=0;j<SizeImageX;j++)
        {
         Array[i][j] = ImageComplex[i][j];
         ImageComplex[i][j]=0.;
         I = i-SizeImageY/2;J = j-SizeImageX/2;
         Array1[i][j] = polar(1.,(double)(sqrt((j*dx)*(j*dx)+(i*dx)*(i*dx)+Z*Z)*Kw))/(double)Z*cos(atan(sqrt((j*dx)*(j*dx)+(i*dx)*(i*dx))/Z));

         Arrayr[i][j] = real(Array[i][j]);
         Arrayi[i][j] = imag(Array[i][j]);
         Array1r[i][j] = real(Array1[i][j]);
         Array1i[i][j] = imag(Array1[i][j]);
         Array2r[i][j] = 0.;
         Array2i[i][j] = 0.;
        }
    }


 for(k=0;k<SizeImageY;k++)
    {
     for(l=0;l<SizeImageX;l++)
        {
         for(i=0;i<SizeImageY;i++)
            {
             for(j=0;j<SizeImageX;j++)
                {
//                 ImageComplex[k][l]+=Array[i][j]*Array1[abs(k-i)][abs(l-j)];
                 I = abs(k-i);J = abs(l-j);
                 Array2r[k][l]+=(Arrayr[i][j]*Array1r[I][J]-Arrayi[i][j]*Array1i[I][J]);
                 Array2i[k][l]+=(Arrayr[i][j]*Array1i[I][J]+Arrayi[i][j]*Array1r[I][J]);
//                 ImageComplex[k][l]+=Array[i][j]*polar(1.,(double)(sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)+Z*Z)*Kw))/(double)Z*cos(atan(sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1))/Z));

                }
            }
        }
    }
for(i=0;i<SizeImageY;i++)
    {
     for(j=0;j<SizeImageX;j++)
        {
         ImageComplex[i][j]=polar(sqrt(Array2r[i][j]*Array2r[i][j]+Array2i[i][j]*Array2i[i][j]),
                                  atan2(Array2i[i][j],Array2r[i][j]));
        }
    }

DeleteArrayComplexD2(SizeImageX,Array);
DeleteArrayComplexD2(SizeImageX,Array1);
DeleteArrayFloat2(SizeImageX,Arrayr);
DeleteArrayFloat2(SizeImageX,Arrayi);
DeleteArrayFloat2(SizeImageX,Array1r);
DeleteArrayFloat2(SizeImageX,Array1i);
DeleteArrayFloat2(SizeImageX,Array2r);
DeleteArrayFloat2(SizeImageX,Array2i);
}
ImageBase::IKG_(float Rx,float Ry,float Z,float Kw,int n)//Интеграл Кирхгофа
{
 int i,j,k,l,I,J,n1,n2;
 float x,y,x1,y1,dx;
 dx = Rx/(SizeImageX-1)*n;
 complex<double>** Array;
 complex<double>** Array1;
 float ** Arrayr;
 float** Arrayi;
 float** Array1r;
 float** Array1i;
 float** Array2r;
 float** Array2i;
 CreateArrayComplexD2(SizeImageX,SizeImageY,Array);
 CreateArrayComplexD2(SizeImageX,SizeImageY,Array1);
 CreateArrayFloat2(SizeImageX,SizeImageY,Arrayr);
 CreateArrayFloat2(SizeImageX,SizeImageY,Arrayi);
 CreateArrayFloat2(SizeImageX,SizeImageY,Array1r);
 CreateArrayFloat2(SizeImageX,SizeImageY,Array1i);
 CreateArrayFloat2(SizeImageX,SizeImageY,Array2r);
 CreateArrayFloat2(SizeImageX,SizeImageY,Array2i);

 n1 = SizeImageX*(n-1)/2/n;
 n2 = SizeImageX*(n+1)/2/n;
 for(i=0;i<SizeImageY;i++)
    {
     for(j=0;j<SizeImageX;j++)
        {
         Array[i][j] = ImageComplex[i][j];
         ImageComplex[i][j]=0.;
         I = i-SizeImageY/2;J = j-SizeImageX/2;
         Array1[i][j] = polar(1.,(double)(sqrt((j*dx)*(j*dx)+(i*dx)*(i*dx)+Z*Z)*Kw))/(double)Z*cos(atan(sqrt((j*dx)*(j*dx)+(i*dx)*(i*dx))/Z));
         Arrayr[i][j] = real(Array[i][j]);
         Arrayi[i][j] = imag(Array[i][j]);
         Array1r[i][j] = real(Array1[i][j]);
         Array1i[i][j] = imag(Array1[i][j]);
         Array2r[i][j] = 0.;
         Array2i[i][j] = 0.;
        }
    }
 for(k=0;k<SizeImageY;k++)
    {
     for(l=0;l<SizeImageX;l++)
        {
         for(i=n1;i<n2;i++)
            {
             I = abs(k-i);
             for(j=n1;j<n2;j++)
                {
                 J = abs(l-j);
                 Array2r[k][l]+=(Arrayr[i][j]*Array1r[I][J]-Arrayi[i][j]*Array1i[I][J]);
                 Array2i[k][l]+=(Arrayr[i][j]*Array1i[I][J]+Arrayi[i][j]*Array1r[I][J]);
                }
            }
        }
    }
for(i=0;i<SizeImageY;i++)
    {
     for(j=0;j<SizeImageX;j++)
        {
         ImageComplex[i][j]=polar(sqrt(Array2r[i][j]*Array2r[i][j]+Array2i[i][j]*Array2i[i][j]),
                                  atan2(Array2i[i][j],Array2r[i][j]));
        }
    }

DeleteArrayComplexD2(SizeImageX,Array);
DeleteArrayComplexD2(SizeImageX,Array1);
DeleteArrayFloat2(SizeImageX,Arrayr);
DeleteArrayFloat2(SizeImageX,Arrayi);
DeleteArrayFloat2(SizeImageX,Array1r);
DeleteArrayFloat2(SizeImageX,Array1i);
DeleteArrayFloat2(SizeImageX,Array2r);
DeleteArrayFloat2(SizeImageX,Array2i);
}
ImageBase::ViewImage(TImage *ImageT,float inc)//Вывод на форму изображения
{
int i,j;
 double max,k;
 ImageT->Width=SizeImageX*inc;
 ImageT->Height=SizeImageY*inc;
 max = 0;
 for(i=0;i<SizeImageY;i++)
    {
     for(j=0;j<SizeImageX;j++)
        {
         k = (Image[i][j]);
         if(k>max)
           {
            max = k;
           }
        }
    }
 for(i=0;i<SizeImageY;i++)
    {
     if(i%(int)(1/inc)==0)
     for(j=0;j<SizeImageX;j++)
        {
         k = (Image[i][j]);
         if(j%(int)(1/inc)==0)
         ImageT->Canvas->Pixels[int(inc*j)][int(inc*i)] = (TColor)RGB((int)k,(int)k,(int)k);
        }
    }

}
ImageBase::ViewImage_(TImage *ImageT)//Вывод на форму изображения по размеру
{
int i,j;

double max,k,incX,incY,inc;
 incX = (double)ImageT->Width/SizeImageX;
 incY = (double)ImageT->Height/SizeImageX;
 if(incX>incY)
    inc = incY;
 else
    inc = incX;
 max = 0;
 if(inc<1)
 for(i=0;i<SizeImageY;i++)
    {
     if(i%(int)(1/inc)==0)
     for(j=0;j<SizeImageX;j++)
        {
         k = (Image[i][j]);
         if(j%(int)(1/inc)==0)
         ImageT->Canvas->Pixels[inc*j][inc*i] = (TColor)RGB((int)k,(int)k,(int)k);
        }
    }
 else
 for(i=0;i<SizeImageY*inc;i++)
    {
     for(j=0;j<SizeImageX*inc;j++)
        {
         k = (Image[(int)(i/inc)][(int)(j/inc)]);
         ImageT->Canvas->Pixels[j][i] = (TColor)RGB((int)k,(int)k,(int)k);
        }
    }
}
ImageBase::ViewImageComplex(TImage *Image,int q,float inc,float F_dec)//Вывод на форму комплексного изображения
{
 int i,j;
 double max,k;
 for(i=0;i<SizeImageY;i++)//Снижение уровня функции
    {
     for(j=0;j<SizeImageX;j++)
        {
         ImageComplex[i][j] = ImageComplex[i][j]/F_dec;
        }
    }
 Image->Width=SizeImageX*inc;
 Image->Height=SizeImageY*inc;
 switch(q)
       {
        case 0:
               {
                max = 0;
                for(i=0;i<SizeImageY;i++)
                   {
                    for(j=0;j<SizeImageX;j++)
                       {
                        k = norm(ImageComplex[i][j]);
                        if(k>max)
                          {
                           max = k;
                          }
                       }
                   }
                for(i=0;i<SizeImageY;i++)
                   {
                    if(i%(int)(1/inc)==0)
                    for(j=0;j<SizeImageX;j++)
                       {
                        if(max>0)
                        k = norm(ImageComplex[i][j])/max*255.;
                        if(j%(int)(1/inc)==0)
                        Image->Canvas->Pixels[inc*j][inc*i] = (TColor)RGB((int)k,(int)k,(int)k);
                       }
                   }

                break;
               }
        case 1:
               {
                max = 0;
                for(i=0;i<SizeImageY;i++)
                   {
                    for(j=0;j<SizeImageX;j++)
                       {
                        k = abs(ImageComplex[i][j]);
                        if(k>max)
                          {
                           max = k;
                          }
                       }
                   }
                for(i=0;i<SizeImageY;i++)
                   {
                    if(i%(int)(1/inc)==0)
                    for(j=0;j<SizeImageX;j++)
                       {
                        if(max>0)
                        k = abs(ImageComplex[i][j])/max*255.;
                        if(j%(int)(1/inc)==0)
                        Image->Canvas->Pixels[inc*j][inc*i] = (TColor)RGB((int)k,(int)k,(int)k);
                       }
                   }
                break;
               }
        case 2:
               {

                for(i=0;i<SizeImageY;i++)
                   {
                    if(i%(int)(1/inc)==0)
                    for(j=0;j<SizeImageX;j++)
                       {
                        k = arg(ImageComplex[i][j])/2/M_PI*255.;
                        if(j%(int)(1/inc)==0)
                        Image->Canvas->Pixels[inc*j][inc*i] = (TColor)RGB((int)k,(int)k,(int)k);
                       }
                   }
                break;
               }

       }
}
ImageBase::ViewImageComplex_(TImage *Image,int q,float inc,float F_dec)//Вывод на форму комплексного изображения по размеру
{
 int i,j;
 double max,k,incX,incY;
 for(i=0;i<SizeImageY;i++)//Снижение уровня функции
    {
     for(j=0;j<SizeImageX;j++)
        {
         ImageComplex[i][j] = ImageComplex[i][j]/F_dec;
        }
    }
// Image->Width=SizeImageX*inc;
// Image->Height=SizeImageY*inc;
 incX = (double)Image->Width/SizeImageX;
 incY = (double)Image->Height/SizeImageX;
 if(incX>incY)
    inc = incY;
 else
    inc = incX;

 switch(q)
       {
        case 0:
               {
                max = 0;
                for(i=0;i<SizeImageY;i++)
                   {
                    for(j=0;j<SizeImageX;j++)
                       {
                        k = norm(ImageComplex[i][j]);
                        if(k>max)
                          {
                           max = k;
                          }
                       }
                   }
                if(inc<1)
                for(i=0;i<SizeImageY;i++)
                   {
                    if(i%(int)(1/inc)==0)
                    for(j=0;j<SizeImageX;j++)
                       {
                        if(max>0)
                        k = norm(ImageComplex[i][j])/max*255.;
                        if(j%(int)(1/inc)==0)
                        Image->Canvas->Pixels[inc*j][inc*i] = (TColor)RGB((int)k,(int)k,(int)k);
                       }
                   }
                 else
                 for(i=0;i<SizeImageY*inc;i++)
                    {
                     for(j=0;j<SizeImageX*inc;j++)
                        {
                         if(max>0)

                         k = norm(ImageComplex[(int)(i/inc)][(int)(j/inc)])/max*255.;
                         Image->Canvas->Pixels[j][i] = (TColor)RGB((int)k,(int)k,(int)k);
                        }
                    }
                break;
               }
        case 1:
               {
                max = 0;
                for(i=0;i<SizeImageY;i++)
                   {
                    for(j=0;j<SizeImageX;j++)
                       {
                        k = abs(ImageComplex[i][j]);
                        if(k>max)
                          {
                           max = k;
                          }
                       }
                   }
                if(inc<1)
                for(i=0;i<SizeImageY;i++)
                   {
                    if(i%(int)(1/inc)==0)
                    for(j=0;j<SizeImageX;j++)
                       {
                        if(max>0)
                        k = abs(ImageComplex[i][j])/max*255.;
                        if(j%(int)(1/inc)==0)
                        Image->Canvas->Pixels[inc*j][inc*i] = (TColor)RGB((int)k,(int)k,(int)k);
                       }
                   }
                else
                 for(i=0;i<SizeImageY*inc;i++)
                    {
                     for(j=0;j<SizeImageX*inc;j++)
                        {
                         if(max>0)
                         k = abs(ImageComplex[(int)(i/inc)][(int)(j/inc)])/max*255.;
                         Image->Canvas->Pixels[j][i] = (TColor)RGB((int)k,(int)k,(int)k);
                        }
                    }
                break;
               }
        case 2:
               {
                if(inc<1)
                for(i=0;i<SizeImageY;i++)
                   {
                    if(i%(int)(1/inc)==0)
                    for(j=0;j<SizeImageX;j++)
                       {
                        k = arg(ImageComplex[i][j])/2/M_PI*255.;
                        if(j%(int)(1/inc)==0)
                        Image->Canvas->Pixels[inc*j][inc*i] = (TColor)RGB((int)k,(int)k,(int)k);
                       }
                   }
                else
                 for(i=0;i<SizeImageY*inc;i++)
                    {
                     for(j=0;j<SizeImageX*inc;j++)
                        {
                         if(max>0)
                         k = arg(ImageComplex[(int)(i/inc)][(int)(j/inc)])/2/M_PI*255.;
                         Image->Canvas->Pixels[j][i] = (TColor)RGB((int)k,(int)k,(int)k);
                        }
                    }
                break;
               }

       }
}
float ImageBase::MomImageComplex(int n)//Определение момента светового поля
{
int i,j,k,l,k1,k2,l1,l2,Num;
float x,y,r,fii,dfii,dfiin,mom,f1,f2,dm;
dfiin = M_PI/50;
mom = 0;
Num = 0;
for(i=10;i<SizeImageY/2;i++)
   {
    r = i;
//    dfiin = 8./r;
    for(j=0;j<n;j++)
       {
        fii = j*2*M_PI/n;
        k1 = SizeImageY/2+r*cos(fii+dfiin);
        l1 = SizeImageY/2+r*sin(fii+dfiin);
        f1 = arg(ImageComplex[k1][l1]);
        k2 = SizeImageY/2+r*cos(fii-dfiin);
        l2 = SizeImageY/2+r*sin(fii-dfiin);
        f2 = arg(ImageComplex[k2][l2]);
        dfii = 0.5*
               acos(
                    ((k1-SizeImageY/2)*(k2-SizeImageY/2)+(l1-SizeImageY/2)*(l2-SizeImageY/2))/
                    (
                     sqrt(
                          (k1-SizeImageY/2)*(k1-SizeImageY/2)+(l1-SizeImageY/2)*(l1-SizeImageY/2)
                          )*
                     sqrt(
                          (k2-SizeImageY/2)*(k2-SizeImageY/2)+(l2-SizeImageY/2)*(l2-SizeImageY/2)
                         )
                     )
                    );
        dm = (f2-f1);
        if(dfii==0)
          dfii=dfiin;
        if(fabs(dm)<M_PI)
          dm = dm/2/dfii;
        else
          if(dm>0)
            dm = (dm-2*M_PI)/2/dfii;
          else
            dm = (dm+2*M_PI)/2/dfii;
        mom +=dm;
        Num++;
       }
   }
   ;
mom = mom/Num;
//mom = mom/2/M_PI;
return (mom);
}
float ImageBase::EMomImageComplex(int n)//Определение момента светового поля
{
int i,j,Num;
float x,y,r,fii,mom,dfx,dfy,dm;
Num = 0;
mom = 0;
for(i=1;i<SizeImageY-1;i++)
   {
    x = i-SizeImageY/2;
    for(j=1;j<SizeImageX-1;j++)
       {
        y = j-SizeImageX/2;
        r = sqrt(x*x+y*y);
        if (atan2(y,(x+0.000001))>=0)
           fii = atan2(y,(x+0.000001));
        else
           fii = atan2(y,(x+0.000001))+2*M_PI;
        dm = arg(ImageComplex[i+1][j])-arg(ImageComplex[i-1][j]);
        if(fabs(dm)<M_PI)
          dm = dm;
        else
          if(dm>0)
            dm = dm-2*M_PI;
          else
            dm = dm+2*M_PI;
        dfx = dm/2.;
        dm = (arg(ImageComplex[i][j+1])-arg(ImageComplex[i][j-1]));
        if(fabs(dm)<1.95*M_PI)
          dm = dm;
        else
          if(dm>0)
            dm = dm-2*M_PI;
          else
            dm = dm+2*M_PI;
        dfy = dm/2.;

        dm = -r*sin(fii)*dfx+r*cos(fii)*dfy;
        if(r<SizeImageX/2)
          {
           mom +=dm;
           Num++;
          }
       }
   }
   ;
mom = mom/Num;
//mom = mom/2/M_PI;
return (mom);
}
ImageBase::CenterCat(int R)//Вырезать центр изображения
{
 int i,j;
  for(i=-R;i<=R;i++)
     {
      for(j=-R;j<=R;j++)
         {
          ImageComplex[SizeImageY/2+i][SizeImageX/2+j]=0;
         }
     }
}
ImageBase::FourFunction(float **FourC,int Size)//Заполнение изображения косинусным рядом с коэф. FourC,
                                                 // Size-размерность массива
{
 int i,j,n,m;
 float c1,c2;
 float **mas;
 CreateArrayFloat2(SizeImageX,SizeImageY,mas);
 for(i=0;i<SizeImageY;i++)
    {
     for(j=0;j<SizeImageX;j++)
        {
         ImageComplex[i][j] = polar((float)1.,(float)M_PI);
         mas[i][j] = M_PI;
        }
    }
 for(n=0;n<Size;n++)
    {
     for(m=0;m<Size;m++)
        {
         for(i=0;i<SizeImageY;i++)
            {
             for(j=0;j<SizeImageX;j++)
                {
                 c1 = cos((2*M_PI*i*(n+1))/(float)SizeImageY);
                 c2 = cos((2*M_PI*j*(m+1))/(float)SizeImageX);
                 mas[i][j] += FourC[n][m]*M_PI*(c1*c2);
                 ImageComplex[i][j] = polar((float)1.,mas[i][j]);
//                 ImageComplex[i][j] += polar((float)1.,
  //               (float)(FourC[n][m]*M_PI*(c1+c2)/2.));
                }
            }
        }
    }
}
ImageBase::ImageBase(int SX,int SY)
{
 SizeImageX  = SX;
 SizeImageY  = SY;
 Zeros = 1;
 CreateArrayUC2(SizeImageY,SizeImageX,Image);
 CreateArrayComplex2(SizeImageY,SizeImageX,ImageComplex);
}
ImageBase::~ImageBase()
{
 DeleteArrayUC2(SizeImageY,Image);
 DeleteArrayComplex2(SizeImageY,ImageComplex);
}

ReadBMPFile(unsigned char *FileName,int &X,int &Y)//Чтение заголовка BMP файла
{
 BmpFile BMP;
 fileReturnedCode rc=frcOk;
 if((rc=BMP.OpenFile((char *)FileName))==frcOk )
   {
    Y = BMP.GetVerSize();
    X = BMP.GetHorSize();
   }
    BMP.CloseFile();

}

